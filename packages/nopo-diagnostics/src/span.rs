use std::collections::HashMap;
use std::fmt;
use std::path::{PathBuf, Path};

#[derive(Debug, Default, Clone)]
pub struct FileIdMap {
    map: HashMap<FileId, PathBuf>,
    /// The id for the next file.
    counter: u16,
}

impl FileIdMap {
    pub fn new() -> Self {
        Self::default()
    }

    pub fn insert_new_file(&mut self, path: PathBuf) -> FileId {
        let file_id = FileId(self.counter);
        self.counter += 1;
        self.map.insert(file_id, path);
        file_id
    }

    pub fn get_file_id(&self, file_id: FileId) -> &Path {
        &self.map[&file_id]
    }
}

/// An unique identifier for every file in the current package.
#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
pub struct FileId(pub u16);

impl FileId {
    /// A dummy file id that should only be used for testing purposes. All other file ids should be
    /// generated by a file id map.
    pub const DUMMY: FileId = FileId(u16::MAX);
}

/// A span of text in a source file.
#[derive(Clone, Copy, PartialEq, Eq, Hash)]
pub struct Span {
    /// The index of the first character in the span.
    pub start: u32,
    /// The index of the first character after the span.
    pub end: u32,
    /// The file in which this span lives.
    pub file_id: FileId,
}

impl Span {
    /// Crete a dummy span. This is used notably as the span for the identifier of the very most
    /// top-level module of a package.
    pub fn dummy(file_id: FileId) -> Self {
        Self {
            start: 0,
            end: 0,
            file_id,
        }
    }
}

impl fmt::Debug for Span {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        write!(f, "{}..{}", self.start, self.end)
    }
}

#[derive(Clone, Copy, PartialEq, Eq, Hash)]
pub struct Spanned<T>(pub T, pub Span);

impl<T: fmt::Debug> fmt::Debug for Spanned<T> {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        write!(f, "({}..{}) ", self.1.start, self.1.end)?;
        self.0.fmt(f)
    }
}

impl<T> std::ops::Deref for Spanned<T> {
    type Target = T;

    fn deref(&self) -> &Self::Target {
        &self.0
    }
}
impl<T> std::ops::DerefMut for Spanned<T> {
    fn deref_mut(&mut self) -> &mut Self::Target {
        &mut self.0
    }
}

pub fn spanned<T>(span: Span, node: T) -> Spanned<T> {
    Spanned(node, span)
}

impl<T> Spanned<T> {
    /// Get the unspanned node.
    pub fn unspan(self) -> T {
        self.0
    }

    pub fn respan(self, span: Span) -> Self {
        spanned(span, self.0)
    }

    pub fn span(&self) -> Span {
        self.1
    }
}
